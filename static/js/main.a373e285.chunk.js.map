{"version":3,"sources":["Components/AddTaskContainer.js","Components/Task.js","Components/TodoList.js","App.js","Helper.js","serviceWorker.js","index.js"],"names":["AddTaskContainer","state","newTask","event","this","setState","target","value","props","addTask","className","type","placeholder","onChange","handleChange","bind","onClick","handleAddButtonClick","Component","Task","isCompleted","toggleTaskComplete","name","removeTask","TodoList","tasks","map","task","key","id","App","taskId","newArr","forEach","filter","console","log","count","push","State","stringifiedState","JSON","stringify","window","localStorage","setItem","saveStateToLocalStorage","getItem","parse","getStateFromLocalStorage","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a373e285.chunk.js","sourcesContent":["import React, {Component} from 'react'\r\n\r\nclass AddTaskContainer extends Component{\r\n   state = {\r\n       newTask : \"\",\r\n   }\r\n   handleChange(event){\r\n      this.setState({\r\n          newTask : event.target.value\r\n      })\r\n   }\r\n   handleAddButtonClick(){\r\n        this.props.addTask(this.state.newTask);\r\n        this.setState({\r\n            newTask : \"\"\r\n        })\r\n   }\r\n   render(){\r\n      return (\r\n        <div className=\"text-center m-1\">\r\n          <input type = \"Text\" placeholder = \"enter the task name\" value = {this.state.newTask} onChange = {this.handleChange.bind(this)}/>\r\n          <button className=\"btn btn-success m-2\" onClick = {this.handleAddButtonClick.bind(this)}>Add Task</button>   \r\n          </div> \r\n      );\r\n   }\r\n};\r\n\r\nexport default AddTaskContainer;","import React from \"react\";\r\nimport \"./Task.css\";\r\n\r\nlet Task = (props) => {\r\n  return (\r\n    <div className=\"cursorPointer bg-primary m-2\">\r\n      <div className=\"row p-2\">\r\n        <div className=\"col-10 text-center font-weight-bold text-white \">\r\n          <p\r\n            className={props.isCompleted ? \"taskCompleted\" : \"\"}\r\n            onClick={props.toggleTaskComplete}\r\n          >\r\n            {props.name}\r\n          </p>\r\n        </div>\r\n        <div className=\"col-2\">\r\n          <button className=\"btn btn-danger\" onClick={props.removeTask}>\r\n            Remove\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Task;\r\n","import React from \"react\";\r\nimport Task from './Task';\r\n\r\nlet TodoList = (props) => {\r\n  return (\r\n    <div>\r\n      {props.tasks.map((task) => {\r\n        return (\r\n          <Task\r\n            name={task.name}\r\n            key={task.id}\r\n            removeTask={()=>props.removeTask(task.id)}\r\n            isCompleted = {task.isCompleted}\r\n            toggleTaskComplete = {()=>props.toggleTaskComplete(task.id)}\r\n          />\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TodoList;\r\n","import React, { Component } from \"react\";\r\nimport AddTaskContainer from \"./Components/AddTaskContainer\";\r\nimport TodoList from \"./Components/TodoList\";\r\nimport { saveStateToLocalStorage, getStateFromLocalStorage } from \"./Helper\";\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    console.log(\"Constructor called\");\r\n    this.state = {\r\n      count: 0,\r\n      tasks: [],\r\n    };\r\n  }\r\n\r\n  toggleTaskComplete = (taskId) => {\r\n    let newArr = [...this.state.tasks];\r\n    newArr.forEach((task) => {\r\n      if (task.id === taskId) {\r\n        task.isCompleted = !task.isCompleted;\r\n      }\r\n    });\r\n    this.setState({\r\n      tasks: newArr,\r\n    });\r\n  };\r\n  addTask(newTask) {\r\n    let newArr = [...this.state.tasks];\r\n    newArr.push({\r\n      name: newTask,\r\n      id: this.state.count + 1,\r\n      isCompleted: false,\r\n    });\r\n    this.setState({\r\n      tasks: newArr,\r\n      count: this.state.count + 1,\r\n    });\r\n  }\r\n  removeTask = (id) => {\r\n    let newArr = this.state.tasks.filter((task) => {\r\n      return task.id !== id;\r\n    });\r\n    this.setState({\r\n      tasks: newArr,\r\n    });\r\n    console.log(newArr);\r\n  };\r\n  componentDidUpdate() {\r\n    console.log(\"componentDidUpdate called\");\r\n    saveStateToLocalStorage(this.state);\r\n  }\r\n  shouldComponentUpdate() {\r\n    console.log(\"shouldComponentUpdate called\");\r\n    return true;\r\n  }\r\n  /*\r\n  componentWillUpdate() {\r\n    console.log(\"componentWillUpdate called\");\r\n  }\r\n  */\r\n  componentDidMount() {\r\n    console.log(\"componentDidMount called\");\r\n    let State = getStateFromLocalStorage();\r\n    if (State) {\r\n      this.setState({\r\n        ...State,\r\n      });\r\n    }\r\n  }\r\n  render() {\r\n    console.log(\"Rendering\");\r\n    return (\r\n      <div className=\"container\">\r\n        <h1 className=\"text-center\"> Todo App</h1>\r\n        <AddTaskContainer addTask={this.addTask.bind(this)} />\r\n        <TodoList\r\n          tasks={this.state.tasks}\r\n          removeTask={this.removeTask}\r\n          toggleTaskComplete={this.toggleTaskComplete}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","export function saveStateToLocalStorage(State){\r\n     let stringifiedState = JSON.stringify(State)\r\n     window.localStorage.setItem(\"taskState\",stringifiedState)\r\n}\r\n\r\nexport function getStateFromLocalStorage(){\r\n    let State = localStorage.getItem(\"taskState\");\r\n    let parsedState = JSON.parse(State);\r\n    return parsedState;\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n    <App />,  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}